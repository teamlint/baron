// Code generated by baron. DO NOT EDIT.
// Rerunning baron will overwrite this file.
// Version: v0.2.5-5-g2cc5b0d-dirty
// Version Date: 2020-11-10T11:16:32+08:00

package server

import (
	"log"
	"net"
	"net/http"
	"net/http/pprof"
	"runtime"

	"github.com/nats-io/nats.go"

	"google.golang.org/grpc"

	pb "github.com/teamlint/baron/_example/api/start"
	"github.com/teamlint/baron/_example/start-service/service"
)

var (
	_ runtime.Error
	_ net.Error
)

// Config contains the required fields for running a server
type Config struct {
	HTTPAddr  string
	DebugAddr string
	GRPCAddr  string
	NATSAddr  string
	Debug     bool
}

func NewEndpoints(svc pb.StartServer) pb.Endpoints {
	// Business domain.
	// Wrap Service with middlewares. See service/middlewares.go
	svc = service.WrapService(svc)

	// Endpoint domain.
	var (
		statusEndpoint = pb.MakeStatusEndpoint(svc)
	)

	endpoints := pb.Endpoints{
		StatusEndpoint: statusEndpoint,
	}

	// Wrap selected Endpoints with middlewares. See handlers/middlewares.go
	endpoints = service.WrapEndpoints(endpoints)

	return endpoints
}

// Run starts a new http server, gRPC server, and a debug server with the
// passed config and logger
func Run(cfg Config) {
	svc := service.NewService()
	endpoints := NewEndpoints(svc)

	// Mechanical domain.
	errc := make(chan error)

	// Server Interrupt .
	go Interrupt(errc)

	// Debug listener.
	if cfg.Debug {
		go func() {
			log.Println("transport", "debug", "addr", cfg.DebugAddr)

			m := http.NewServeMux()
			m.Handle("/debug/pprof/", http.HandlerFunc(pprof.Index))
			m.Handle("/debug/pprof/cmdline", http.HandlerFunc(pprof.Cmdline))
			m.Handle("/debug/pprof/profile", http.HandlerFunc(pprof.Profile))
			m.Handle("/debug/pprof/symbol", http.HandlerFunc(pprof.Symbol))
			m.Handle("/debug/pprof/trace", http.HandlerFunc(pprof.Trace))

			errc <- http.ListenAndServe(cfg.DebugAddr, m)
		}()
	}

	// HTTP transport.
	go func() {
		log.Println("transport", "HTTP", "addr", cfg.HTTPAddr)
		h := pb.MakeHTTPHandler(endpoints, HTTPServerOptions()...)
		errc <- http.ListenAndServe(cfg.HTTPAddr, h)
	}()

	// gRPC transport.
	go func() {
		log.Println("transport", "gRPC", "addr", cfg.GRPCAddr)
		ln, err := net.Listen("tcp", cfg.GRPCAddr)
		if err != nil {
			errc <- err
			return
		}

		srv := pb.MakeGRPCServer(endpoints, GRPCServerOptions()...)
		s := grpc.NewServer()
		pb.RegisterStartServer(s, srv)

		errc <- s.Serve(ln)
	}()

	// NATS transport.
	go func() {
		log.Println("transport", "NATS", "addr", cfg.NATSAddr)
		conn, err := nats.Connect(cfg.NATSAddr)
		if err != nil {
			errc <- err
			return
		}
		closeConn := func(c *nats.Conn) {
			c.Close()
		}
		runtime.SetFinalizer(conn, closeConn)

		srv := pb.MakeNATSServer(endpoints, NATSSubscriberOptions()...)
		err = pb.ServeNATS(conn, srv)
		if err != nil {
			errc <- err
			return
		}
	}()

	// Run!
	log.Println("exit", <-errc)
}
