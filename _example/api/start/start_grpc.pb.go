// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package start

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// StartClient is the client API for Start service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StartClient interface {
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type startClient struct {
	cc grpc.ClientConnInterface
}

func NewStartClient(cc grpc.ClientConnInterface) StartClient {
	return &startClient{cc}
}

func (c *startClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/start.Start/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StartServer is the server API for Start service.
// All implementations must embed UnimplementedStartServer
// for forward compatibility
type StartServer interface {
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	mustEmbedUnimplementedStartServer()
}

// UnimplementedStartServer must be embedded to have forward compatible implementations.
type UnimplementedStartServer struct {
}

func (UnimplementedStartServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedStartServer) mustEmbedUnimplementedStartServer() {}

// UnsafeStartServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StartServer will
// result in compilation errors.
type UnsafeStartServer interface {
	mustEmbedUnimplementedStartServer()
}

func RegisterStartServer(s grpc.ServiceRegistrar, srv StartServer) {
	s.RegisterService(&_Start_serviceDesc, srv)
}

func _Start_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StartServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/start.Start/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StartServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Start_serviceDesc = grpc.ServiceDesc{
	ServiceName: "start.Start",
	HandlerType: (*StartServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _Start_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "start.proto",
}
