// Code generated by go-bindata. DO NOT EDIT.
// sources:
// NAME-service/baron/NAME.pb.baron.gotemplate (12.271kB)
// NAME-service/cmd/NAME/main.gotemplate (1.06kB)
// NAME-service/server/server.gotemplate (2.4kB)
// NAME-service/service/hooks.gotemplate (62B)
// NAME-service/service/middlewares.gotemplate (75B)
// NAME-service/service/service.gotemplate (53B)
// NAME-service/svc/client/grpc/client.gotemplate (3.184kB)
// NAME-service/svc/client/http/client.gotemplate (105B)
// NAME-service/svc/transport_http.gotemplate (103B)

package template

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _baronNamePbBaronGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x93\xdb\xb8\x72\x7e\x16\x7f\x45\x1f\x95\xcf\x5a\xdc\xc3\xa1\x36\x0f\x49\x9d\x8c\x6b\x52\xb5\xbe\xac\xd7\xc9\xda\x9e\xd8\xe3\xdd\x07\x97\xcb\x0b\x91\x4d\x09\x19\x12\xa0\x01\x70\x2e\xab\xe8\xbf\xa7\x1a\x17\x12\x94\x28\xcd\x6c\x92\xa7\x54\x1e\x5c\xd6\x10\x8d\x46\xdf\xf0\xa1\xbb\x81\xe5\x12\x5e\xc8\x12\x61\x8d\x02\x15\x33\x58\xc2\xea\x1e\x56\x4c\x49\x91\xc3\xcb\xf7\xf0\xee\xfd\x15\xbc\x7a\xf9\xe6\x2a\x4f\x96\x4b\xf8\x80\xaa\x13\x82\x8b\xb5\x23\x80\x5b\x5e\xd7\x20\x6f\x50\xdd\x2a\x6e\x10\xcc\x86\x6b\xa8\x78\x8d\x96\xf8\x57\x54\x9a\x4b\x71\x0e\xdb\x6d\xee\x7f\xef\x76\xd1\x00\xbc\x64\x06\xe3\x51\xfa\x7b\xb7\x4b\x92\x96\x15\xd7\x6c\x8d\x34\x72\xe9\x7e\xbe\x63\x8d\x1d\x59\x2e\xe1\x2a\xac\x01\x85\x14\x86\x71\xa1\xa1\x41\xb3\x91\xa5\x06\x23\xa1\x61\xd7\x08\x5c\x94\xfc\x86\x97\x1d\xab\x01\x45\xd9\x4a\x2e\x8c\x86\x4a\xc9\x06\x34\xaa\x1b\x5e\xa0\xce\x88\x93\xc2\x6f\x1d\x6a\x03\x4c\x94\xa0\x50\xb7\x52\x68\x04\x73\xdf\xa2\xe5\x44\xa4\xa4\x91\xd4\x38\x70\xc9\x80\x69\xb8\xc5\xba\xa6\xff\x51\x14\xb2\x44\xa5\x89\x01\xf1\x2b\xd1\xff\x5d\x49\xe5\x27\x5a\x6e\x99\xfd\xc0\xc8\x52\x15\xc8\x4e\x81\xee\xda\x56\x2a\xb2\xb4\x51\x4c\x68\xfa\x4d\xcb\x71\x56\xf3\x3f\x98\xe1\x52\x10\xb7\x4a\xaa\x86\x19\x9d\x27\x09\x6f\x2c\xc5\x22\x99\xcd\x57\xf7\x06\xf5\x3c\x99\xcd\xed\xda\x5c\xac\x97\xff\xa1\xa5\xa0\x0f\x55\x63\xe8\x3f\x2e\x97\x5c\x76\x86\xd7\xf4\x87\x40\xb3\xdc\x18\xd3\xd2\x6f\x32\x16\xde\x59\x1a\x6d\x54\x21\xc5\x8d\xff\xc9\xc5\x5a\xbb\x99\xf3\x24\x99\xcd\xd7\xdc\x6c\xba\x55\x5e\xc8\x66\xb9\x96\x6b\xb9\x6c\x95\x34\x72\xd5\x55\x76\xa1\x76\x35\x3f\x45\x62\x7f\x1c\x50\x9c\x5d\x73\xb3\xa4\x7f\xc1\x8a\x07\x14\x8a\xd7\x35\x5b\x36\xdd\xdd\xde\x48\x7b\xbd\x5e\xa2\x52\x52\x69\x27\x9a\x94\xeb\x1a\xf3\xb5\xac\x99\x58\xe7\x52\xad\x97\x6b\xd5\x16\xcb\x06\x0d\x2b\x99\x61\x44\x43\x1f\x06\x9b\x1e\x91\xa3\x27\xb0\xf3\xe7\xc9\x8c\x6c\xf4\x27\x66\x39\x93\xa6\x36\x1a\x5f\xf5\xf1\x55\xc8\xba\xc6\xc2\xe8\xe0\x68\xb3\x89\xe2\x06\xcc\x86\x19\x28\x64\xd3\x52\x54\x30\x01\xac\x2c\x43\x30\xe6\xf0\xc6\x3c\xd5\xc4\xac\x41\x26\x0c\xc5\xde\x0a\xa1\xd3\x58\x52\x90\x31\xd8\x60\xdd\xa2\x02\x6d\x54\x57\x98\x8c\x86\xfd\x52\xd3\x2b\x71\x61\x24\x30\x62\xa7\xb9\x58\xd7\x08\x2d\x53\xac\x41\x83\x8a\x36\x25\x7d\x7f\x23\x80\xb9\xf0\x56\x19\x70\xf3\x54\xd3\x62\x55\x57\xdb\x30\xad\x3a\x51\x50\x08\x7a\x91\x05\x52\x94\x4a\x90\xad\xc5\x06\x90\x34\xb7\x45\x75\x16\x16\x24\x86\x2b\xa6\xb9\xce\xe1\x27\xa9\x00\xef\x58\xd3\xd6\x98\xc1\xbd\xec\xa0\xe1\xeb\x8d\x81\x96\x69\xda\x22\x91\xa9\x48\xc0\x7e\x21\xb7\x4e\xab\x64\xd9\x15\x68\xcd\xc0\x04\x90\x89\xf3\x9f\x99\x28\x6b\x92\xf1\x96\x9b\x0d\x20\x2b\x36\x7e\xa7\xc3\x22\xac\x9e\xc2\x2d\x57\x58\x42\xd7\x3a\xa6\xba\xc5\x82\x57\xbc\x80\x96\x99\x4d\x0e\x8b\x37\x56\x3e\xae\x89\xff\x8a\xad\xea\x7b\x60\xd0\x70\x6d\x1c\x4a\x40\x89\x9a\xaf\x05\x4d\xe5\xe2\x46\x5e\xa3\x35\xe5\x47\xe7\x96\x1e\x55\xac\x88\x38\x76\xb6\x73\x06\xb1\x08\x96\xcc\xd3\xd8\xba\x45\xcd\x51\x98\xb1\x75\x23\xc7\x0d\x00\x55\xdf\x13\x8c\x39\x76\x58\x9e\x72\x23\x41\x89\xb3\x15\x27\x0b\x37\xe8\xc2\x6a\x90\x97\x0b\x83\xaa\x62\x14\x50\xd3\x9e\x20\x66\xfd\x62\xd3\x20\xd9\xd1\x62\x30\x0e\xf5\xfc\x1d\xde\xbe\xf0\xfa\x14\xb2\x59\x71\x61\xed\xd4\x78\x11\x23\xc7\x66\x1e\x4a\x4d\xa7\x04\x70\x1b\xc9\x24\x60\xc1\xea\x1a\x95\x0b\x66\x2f\x6c\x9e\x58\x75\x0e\x0c\xba\x4d\xb6\x5b\xc5\xc4\x1a\xe1\x09\x87\xf3\x0b\xc8\x03\xfd\x5b\xe7\x8c\xdd\x2e\x99\x6d\xb7\x4f\x78\xee\x0e\x84\x30\x1f\x00\x7a\x25\xf2\xf0\x31\xd9\x6e\xcf\xe8\xeb\x6e\x97\xec\xc6\x7b\xf5\x11\x8b\x50\x74\xc2\x22\x92\x30\x85\x68\xdd\x45\x61\xee\xc0\x23\x6a\xfe\xc2\xfd\x9f\x51\x34\x7c\xbf\xdd\xbe\x96\x44\x03\x4f\x78\xfe\xc1\x9d\x2f\x57\xf7\x2d\xfa\x79\x29\x2c\xf6\x28\xdc\xa9\x13\x91\x64\x60\x11\x2f\x85\x6d\x32\x9b\x85\x53\xc9\x7e\x24\x51\x31\x9f\xd0\x9e\xa4\xa1\xd5\xd3\x64\x36\xe3\x95\x25\xfd\xcb\x05\x08\x5e\x5b\x1e\x33\xef\x0f\xc1\x6b\xcb\x26\x99\xcd\x76\x49\xff\x35\xac\x90\x3f\x28\x58\x9a\x11\x8b\x64\xb6\x4b\xb6\x5b\x67\x55\xb2\xe9\x5b\xda\x49\xb1\x61\xed\x5e\x7d\x62\xd0\x1a\xd6\xb9\x2b\xb6\xf5\x13\x83\x53\xe6\x76\xf6\x26\x66\x53\xfa\x69\xb2\x7d\x34\xd1\x0d\x7f\xb4\xfb\x2e\x3d\x74\xfc\x48\x6d\x62\x3c\xed\xae\x70\xfc\xf7\xfb\x66\x4b\xfe\xe9\x13\x81\xe8\xb3\x33\x7f\xe4\x17\xe2\xfe\x8d\xd4\xf1\x3c\x0e\xac\x77\xe0\x78\x3b\xe9\xa6\xf7\xa3\xce\xf7\xa2\xc9\x8a\xe3\xa8\x26\x5c\x38\xe5\x44\xe7\xc6\x7e\xe4\xc6\xbb\xc7\x7d\xb6\x76\x77\x5e\x8a\xbd\xf5\x9b\x62\xed\x8f\x75\xfd\xea\xae\xc0\xd6\xc0\xad\x62\xad\x76\xb8\xda\x9b\xae\xe2\x58\x97\x74\xa8\xf8\x0d\x39\xec\x50\xeb\x58\x0b\x48\x13\x47\x7a\xfe\x96\x97\x65\x8d\xb7\x4c\xb9\xd4\xef\x93\x0e\xc9\x20\x65\x3e\x6d\x5b\xdf\x13\xae\x10\x56\x1a\x62\xde\xf4\xd4\xf6\x30\xc0\x1b\x54\xf7\xbd\x1f\x69\x1f\x11\x6c\x84\xe3\x91\xf8\xbd\x6f\xe9\xa8\x20\xb8\xcc\x22\xb4\x2a\x98\xa0\xa3\x92\x0e\x18\x2c\x69\xda\xea\x1e\x04\xf9\xc0\x1d\xa1\x78\x57\xd4\x5d\x89\xa5\x4b\xfd\x56\x48\x22\x90\xce\x2d\x96\xf9\x81\x35\x16\x83\x4c\x19\xcc\x3f\x1a\x66\x3a\x3d\xcf\x60\x7e\xc9\xc5\x7a\x9e\x26\x01\x0f\xbe\x8f\x00\xe1\xd8\x7c\x98\xb0\x4a\x36\x48\x93\xe7\xb9\x4b\xbb\x6c\x2c\x71\xe1\x3f\x9f\x5f\x40\xc3\xda\xcf\x6e\xe8\x8b\x33\xff\x76\x47\xee\x27\x1c\x7b\x08\xaf\x66\xb3\x79\x14\x51\xf3\x73\xd8\xee\x32\x3f\xd5\xb9\x7f\xb6\x4b\x92\x19\x79\xe3\x2b\x89\x62\x63\xd7\xb2\xec\xc5\xda\x3a\xf4\xf8\x9a\x81\xbc\xa6\xe1\x20\xd8\x67\xbc\xfb\xf2\x0c\xfe\x22\xaf\x5d\x28\xb6\x4c\xf0\x62\x51\x35\x26\xff\xd8\x2a\x2e\x4c\xb5\x98\xbf\x0a\x2c\x7a\x0f\x3e\xfd\xab\x7e\x0a\xa5\x44\x0d\x42\x1a\xc0\x3b\xae\xcd\x33\xd0\x88\xb1\xe3\xfb\xd8\xd1\xf9\x5a\xce\x49\xa8\x34\xf5\xd8\x54\x62\x8d\x06\x17\x41\x02\x3b\x36\x28\xc0\x45\x31\x88\xdf\x9b\xef\xf1\x86\xe2\x95\x65\x71\x71\x01\x23\x93\xf9\x9d\x36\x89\xb0\x70\x11\x49\xbe\x98\x24\x49\xc3\xd6\x1b\x99\xdc\x6d\xbb\x5f\xd8\x0a\x6b\x2c\x87\x68\x70\x75\xd3\x1a\x4d\x88\xdd\x38\x85\x73\x21\x7c\xbb\x41\xd1\x8f\xca\x28\x5c\x3d\x33\x17\x75\x99\xdb\x65\x7e\x23\x74\x8e\x18\x5c\x31\xc6\x5c\x45\xc7\x0b\xca\x64\x14\x2f\x5c\x8a\x19\xc9\xb0\xe1\xc5\xc6\x4e\xd5\x28\xa6\x44\xf0\xc7\xb7\x9f\x1d\x92\x17\xa9\xfc\xe1\x7d\xa8\x95\xc5\x5a\x17\xc0\xd9\x21\x2c\x4f\x20\x75\x72\x4c\xaf\xff\x36\x36\x1d\x08\x95\x79\x3d\xad\xc5\x15\x16\xc8\x6f\x5c\x9a\x67\x55\xdc\xcb\x9e\x73\xf8\x88\xd8\xb3\x89\xb8\xd8\x81\x90\x7d\xf6\xfb\x9e\x04\xa5\x88\x2c\xd1\x30\x5e\xdb\x4c\x31\x6c\x27\x5b\xc1\xf9\x0c\x97\xd5\xdc\xdc\xe7\xa7\x20\x64\xa4\x7b\x8c\x24\x7f\xda\xa2\xff\x8f\x33\xff\x77\x70\x66\x34\x2d\x9b\xce\xfd\x4e\xc1\xce\xeb\x0f\x97\x2f\x5c\x92\xd4\xa7\x6a\xc3\x27\xdb\x29\xd1\xc3\x91\x3c\x9c\xaa\xec\x86\xf1\x9a\xad\x6a\x74\x19\xfb\xfa\xc3\xe5\x0b\xd8\x6e\x27\x93\x2f\x1f\xd4\x63\xce\x8b\x81\x55\x54\x19\xc8\xd6\x55\x95\x79\x9e\x8f\x8a\xf4\xdc\x4d\x72\x07\x7c\x7a\x6c\x21\x32\x9a\x8e\x08\x35\x99\xfd\xf3\x97\xe3\x9c\xc8\xc8\x53\xa3\xcf\xb1\x92\x0a\x17\xa1\x67\x70\x25\x7d\x3a\x98\x66\x64\xb7\xbd\x35\x2e\x28\x75\x41\x51\x2e\x46\x9f\x7b\x5d\xf2\x3c\x4f\x93\x90\x7f\x7d\x47\xab\xb9\x35\xb6\xc9\x6c\xb9\x84\xed\x16\xae\xe4\x2f\xf2\x16\x15\x8c\x54\x82\xc3\xa4\x78\x32\x7e\xb6\xdb\x30\xbd\x77\xfa\x39\x8c\x55\x7a\x87\xb7\xde\xe4\x14\x05\x43\x9c\x4f\xc4\x09\x6d\xd2\xd9\x4b\xdb\xa0\x22\x4f\x45\x14\x3e\x59\xb5\x04\xaf\xc4\x24\x81\x2f\x42\x88\x62\x64\x89\x3c\xcf\xe9\x23\xd9\x6e\x22\xfc\x06\x83\xec\x57\xac\x7d\xae\x3c\xed\xeb\x3e\xf3\x76\xe7\x4c\xc4\xe7\x4f\x55\x89\x07\xe6\x03\xd8\xb3\x9f\x6f\x30\x1c\x14\x8a\x9e\x8d\xc5\xf6\x68\x75\x23\x07\x45\x1e\xaf\xc3\x83\xa2\xba\x73\x41\xc3\xf7\xc3\x52\x29\xc4\xe5\xc4\xa9\x9a\x93\xea\x90\xff\xdd\xa2\xf3\x2b\x31\x6d\x47\x95\xca\x81\x25\xdd\x66\xa2\x38\x89\x6b\x97\xc3\xc2\xe5\xa0\x6a\xd9\x25\x43\xe1\xd9\x3e\xba\xe6\x1c\x17\x31\xde\xc2\x2e\x98\x1f\x36\xef\x72\x09\xa7\xe2\x1e\x38\x81\xdc\xb8\x25\x98\xbb\x09\x9e\xe2\x27\xf2\x8f\xef\xdf\x89\x1b\x54\x04\x91\x36\xbe\x1d\x30\x1e\x86\x59\x28\x2c\x6d\x47\xaa\xd3\xa8\xce\x4a\xd9\x30\x2e\x4e\x11\xe7\x70\xa9\x78\xc3\x14\xaf\xef\x43\xbf\x28\x6e\x2e\xb9\x20\x39\xa5\xc7\xe2\xeb\x61\x70\x90\x2e\x1f\xf0\xdb\x5e\x85\xbb\x5f\xd8\x7a\xbf\xfb\x8a\xd6\xcf\x79\x4c\x45\xdb\x7b\xf2\xdb\x09\x37\x39\x48\x79\x94\x9b\x4e\xa2\xcf\xa4\x9f\xdc\x8c\x40\x72\xcc\x51\x0f\xbb\x20\xf4\xfe\xe5\x70\xde\x4d\x91\xb5\xf5\xfd\xa3\xfc\x74\x52\x91\x29\x47\x4d\x35\x1d\x4e\x79\x4a\xb7\xae\xf9\xf0\xe8\xde\x4d\x12\xf7\x7b\xa6\xbc\xf5\xb3\x6d\x32\xeb\xc4\x29\x70\x70\x3c\x4e\x83\x4f\x53\xf6\x94\xf9\xdb\x97\xe9\x3e\x01\xc9\x4a\x10\x7a\x9d\xc1\xcd\x90\x49\x35\x7d\x0a\x78\x33\xea\x71\xd8\xab\x1d\x84\x6b\xbc\xb7\xae\x2e\x29\xd9\x5a\x49\xb3\x21\xfb\x86\x55\xfc\xa5\x08\x2c\xae\x53\x9f\xd6\x73\xd7\x6f\xaf\xc9\x57\x9e\x0b\xf3\xc5\x8c\xed\x5d\xbe\x60\x42\x0a\x5e\xb0\xfa\x67\x64\x25\xaa\x7f\xc3\xfb\x90\xf3\xd3\x42\x5a\xfa\x8e\xaa\xf1\x25\x54\x60\x51\x14\x18\x7a\x0a\xc8\xcd\x06\x95\x5f\x99\xc6\xc9\x14\x17\xbd\xae\xbf\x71\xb3\xf9\x95\xd5\x1d\x3a\x24\x24\x5d\x3f\xff\xf0\x25\x7d\x90\xf0\x88\x74\x8b\xeb\x74\xe0\xe0\xb3\x69\xef\xba\xc2\xdc\xf9\xf3\xe9\xe7\xab\xab\xcb\x90\xd8\xd9\x86\xae\x5b\x44\xd8\xfd\x09\x17\x30\x67\x6d\x5b\xf3\xc2\x5e\x25\xd9\x7b\x9b\x67\x50\x6c\x98\xd2\x68\x2e\x3a\x53\x9d\xfd\x7d\xde\xe7\x83\xc4\xc9\x9f\x82\xbe\x6f\x6b\x6f\x1c\xfc\x17\x6b\x9b\x87\xf3\x44\x62\x26\x05\xb4\x0a\x4b\xac\xb8\xc0\xd2\x76\xdf\x75\x94\x1c\x46\xcb\x3c\x98\x1d\x8e\x2e\x63\xf6\xb2\xc3\xf8\x5a\x80\xa2\x86\x0e\x6e\x5e\x41\x6e\xf9\xdb\x08\x1e\xa5\x50\x13\x19\xe3\x71\xee\x36\x08\xa7\x86\x7d\xca\xb8\xb1\x2e\xd2\xa3\x8c\x71\x7a\xc2\x2b\xda\xa9\x0e\x03\xd4\x02\xa3\x3f\x8e\x4f\xf9\xb1\x32\xa8\x16\xfb\x23\xe6\xc5\xe0\xd6\x45\xe4\xe2\xd4\x32\x3a\xd4\xf0\x51\xf9\xaa\x4f\x76\x6c\x1a\xda\xd8\x6a\xb0\xbb\xa3\x4c\xf2\x83\xec\x48\x86\x34\x89\xb2\x53\x5f\xf0\x12\x62\x1f\x31\x71\x4f\xba\xe2\xa2\xe4\x62\x6d\x7b\xbc\x6e\x5a\xfe\xdc\x7d\xf2\xe5\x50\x13\xe6\xd9\xba\xc6\x93\xe7\xbf\xa2\x5a\xc1\x7f\xc2\x95\xfc\xd4\xb6\xa8\x76\xbb\x79\x9a\x5f\x32\xb3\x19\xd1\xd0\x87\x2b\x6c\xda\xda\x5e\x0f\xcf\xd3\x10\x01\x7b\xf6\x1a\x67\xc3\xe3\x74\xd8\x4b\x34\x91\x13\xfb\xa4\x98\xd4\x8b\x96\xb4\x05\xf9\x38\x37\xf6\xc9\x31\x11\xbe\x76\x7d\x95\x51\x62\x3c\x99\x19\xcf\x6c\xa9\x19\xe5\xc6\xd1\x4f\xbf\xab\x9b\x70\x39\x11\xc5\x89\x6b\xe0\xb8\x5c\xd9\xc6\x4f\x68\xc5\x84\x15\x7f\xa3\x71\x95\xc1\xea\x1e\x4a\xac\x58\x57\x1b\x60\x01\x03\x88\x99\xcd\x9b\x65\x05\xfb\x38\x90\x01\x83\x95\x2c\x2d\x06\xd2\xdf\xae\x71\x42\x48\x38\xb7\xeb\xcc\x7b\xf0\xbc\x21\xa4\x22\x56\xf6\x7b\x6e\xa5\x5b\xa4\xee\x82\x87\x81\xb6\xed\x51\x20\x61\x89\xd5\x3f\xfe\xf0\x43\x0e\x6f\xaa\x48\xde\x28\xe1\x77\xd0\x86\xca\x5e\xb9\x13\x45\xab\xe4\x0d\x27\x74\xf7\x3b\xca\xb5\x66\x56\xe8\xa4\x75\x1d\x2c\xa2\xeb\x8f\xb7\x11\x6b\x7b\x9f\x37\x70\x27\x2d\xf2\xb7\x4c\xe9\x0d\xb3\x57\x85\x41\xfe\xc6\x7d\xa2\x88\xd4\x5d\x51\x20\x96\x3a\xb3\x03\xff\xfa\xf1\xfd\x3b\x7f\x73\x5f\x86\x6b\xf6\xbe\x0d\x64\x65\x0f\xe2\x74\x1a\xcb\xe3\x6a\xb9\x0e\xf1\x0b\x72\x57\x16\xee\x07\x7b\xcd\x86\xc1\x11\x37\xe0\x42\x1b\x64\x65\xb0\x99\x03\xc8\x18\x21\xa6\x92\x83\xfe\xee\x21\x83\x5b\x87\x80\xe3\x30\xb0\x39\x01\x79\x35\x83\xaf\xb4\xfd\x62\x93\x38\xf8\xf9\xcd\x36\xbd\xd5\xd6\x7a\xf1\x9c\x98\x05\x87\xee\x5c\xda\xde\x0c\x06\x74\x4d\x19\x22\x59\x8c\x6d\x9b\x3e\x03\xdf\x9b\xe1\x2e\x78\x9e\xdb\x25\xfd\xd4\x57\xae\x5a\xe8\x19\x85\x79\x64\xee\x45\xfa\x2c\x26\xbb\x88\x0e\x7d\x1b\x8c\x17\x3d\xbb\x70\xe6\xcd\x6e\x73\x17\x36\x8b\x94\x60\x70\x31\xf7\x40\x78\x46\xe8\x37\xcf\xe2\xe3\xce\x29\xb0\x09\x41\x16\xcb\x3f\x86\x87\x10\x87\x83\x1e\x36\x37\x19\x12\x93\xc0\xc3\x53\xea\x85\xbf\xeb\xd9\x93\xe5\x3a\x9b\xa0\xcc\x5f\xd3\x48\xda\x1f\xda\x33\xbb\x35\xce\x2f\x9c\xbf\x5c\x38\xbc\xa1\x6c\x4e\xb0\x3a\x3a\x24\xac\xec\xba\x38\x21\x75\x14\x66\x83\xe0\x96\xf9\x05\xe8\x22\x1a\x5e\xa4\xde\x70\x36\x28\xbc\xc4\x44\x98\xf6\x1f\x17\x64\xed\x94\xf0\xc6\xe2\x43\x1c\x1a\x43\x65\x3d\xb3\x82\x81\x6b\x0f\xc2\xef\xf0\x37\x98\xff\x3e\x87\xbf\xc1\xef\xe4\xa3\x73\x0f\x13\xd1\x67\x0f\x5f\x24\xb5\x9f\xc9\x0c\xd7\x15\xf7\xf0\x15\xac\x6e\x37\x66\xa4\xcc\x90\xe9\x6a\xe0\xf6\xbd\x4b\x78\xf4\xf3\x98\xd7\x17\xbe\x03\x1d\x2d\xda\x8b\xef\x40\x62\xa6\x87\x1d\xc8\x85\x49\x66\x01\x6b\x00\xe2\xee\xe7\xe7\x2f\xee\x07\x29\xe1\xca\xf0\xcd\xc0\x34\x85\xd8\xba\xe0\x2f\x16\x3d\x6c\x6f\xf2\x61\x85\x23\xb3\x87\x30\x72\x69\x8b\xfd\x73\xc4\xc2\x0b\x95\x9c\xac\x6b\x1f\x3c\x83\x1f\x7d\x04\x47\xe7\xdb\x6b\x14\x6e\x39\xb7\xda\xee\xc8\x7d\xe1\xd1\x23\x6f\xbf\x1a\xb3\x1a\x1e\xab\xc6\x1c\xda\xea\x80\xff\x7d\xb1\xc3\xb4\x43\xe3\x3d\xbc\x77\xa7\x9f\xfa\x13\x95\xd6\x84\x80\x53\x40\x3a\x89\x9e\xc7\x8a\x2f\x07\xf8\xdb\x64\xe6\x91\x8b\x32\x4e\x0f\xae\xed\x6a\x40\x45\xda\x8e\xaf\x1a\x6e\x5e\xba\x63\x58\x9f\x43\xc5\x6a\x97\x12\xbc\x57\x7c\x4d\x09\xc7\x39\x18\xd5\x61\x36\xca\xe5\x07\xa6\x3d\x52\xdf\x66\x51\x41\x67\x5f\x52\xe5\x6f\x51\x6b\xb6\xc6\x34\x4d\xe2\x22\x6d\x78\xa2\xe3\xc3\x6e\x3f\x33\x3d\xd2\x29\x82\xef\xbd\xfa\x36\xa7\x39\x5e\xad\x0d\x88\xa8\xa2\xa0\x3d\x59\x9f\x11\xe3\xc3\xda\x6c\xc3\x34\x6c\x58\xe9\xe6\x1e\xab\xc6\xec\xe3\x90\x92\xea\x07\xee\x6e\x7e\xfb\x77\x58\xd1\x4b\x3b\x3a\x5f\x2d\x17\xff\x5e\x2d\x0f\xd5\x79\x5f\x04\x52\x00\xad\x55\x5b\x1c\x94\x8a\xa3\x6a\xcf\x31\x19\x97\x7c\x27\x8b\xbd\x87\x6a\xbd\x60\xa1\x08\xff\x4f\x4e\xd9\x93\xdf\x56\x7b\x87\x3c\x28\x50\xc8\xdc\x9d\xc0\xe1\x45\x53\xb1\x21\x9f\xe4\x76\x84\xd5\x5a\xda\x27\x64\x6e\xdf\xb8\x76\x53\xa7\xea\xe4\xf4\xea\x73\x4f\x7a\xd6\xa9\x7a\x4e\x0b\x7f\xfa\xf0\x8b\xcd\xae\xd3\x87\x26\xf6\x5e\x99\x67\x30\xa7\xed\x46\x1b\x77\x9e\x1e\x14\xa7\xb6\x95\xea\x9e\x80\x44\x68\x94\xc3\x19\x21\x4c\xdf\x89\x3b\x99\x6c\x4f\x42\xcb\x74\x43\xce\xb2\x74\xaf\x2e\x69\x0e\xc9\x74\xe6\x53\xbb\xb8\x83\x33\xd4\x11\x0a\x85\xd9\xef\xd2\xd9\xc7\x01\xf6\xa8\xba\xba\xba\x0c\x5f\x2d\x67\x3a\x2e\x1f\x42\xa1\x59\xd4\x98\x3b\xa9\xd6\x64\xdb\x67\x7f\x4b\x1e\xeb\xf8\xcc\x4a\xac\xa8\x42\xcf\x29\x49\xca\x5f\xd4\x52\xdb\xf3\x7e\x76\xc3\x94\xed\x00\x0f\xed\x9f\x3d\x5d\xa3\xbe\x9d\x3d\x02\x56\x5d\xd5\x77\x76\xdd\x3b\xd1\xfc\x03\xb2\xf2\xc7\xba\x5e\x38\xe6\x8f\x7b\x43\x24\x95\xce\x29\x73\xa8\x28\xbf\xcc\x60\x5e\x30\x21\xa4\x01\x45\xb9\x6d\xa8\x2f\x2c\x26\x78\x73\xce\xc3\x8d\x1b\xaf\xa0\x46\xb1\x58\x75\x55\x0a\xff\x02\x3f\xf4\x9d\x9f\x1f\xeb\x5a\xde\x7e\x12\xd7\x42\xde\x8a\x9f\x38\xd6\xa5\x06\x6d\x64\xeb\xf6\x75\x27\xfa\xb4\xd2\x79\xab\x62\xdc\x66\xf6\xbc\x1a\x52\xfa\xfe\x31\x70\xe7\xb8\xb8\xdb\x62\x9d\xd3\x02\x3d\x83\x31\x88\x7f\x1a\xf8\xba\x3b\xb9\x43\x29\x7a\xec\xf6\xaf\x6d\xbc\x69\x2e\x20\x66\x39\x30\x5a\xd8\xf7\xb9\x54\x89\x3e\xef\xaa\x0a\x95\x55\x34\x83\xef\x14\x7e\x4b\x9f\x1d\xbe\xea\x71\xbd\x1b\xcd\xff\xa0\x6c\xee\xef\xff\xf0\xcf\xff\x14\xde\xff\x44\x36\xb2\xa3\xfe\x11\xd0\xaa\xab\xe0\x02\x56\x5d\xf5\xf9\x9c\x3e\x7f\x39\x7c\x05\x64\x1d\xd4\xe7\x20\xdb\x09\x57\x85\xb0\xb7\x6e\x7a\xfa\x57\xfd\xf4\x1c\xbc\xf7\x5a\xa6\x34\x82\x90\xe2\xcc\x96\x86\x31\xe1\x3c\x03\xab\x89\x13\x23\xca\x69\x9f\xb3\x72\x54\x23\xcf\x48\x80\x41\x2c\xf7\x14\x29\x99\xcd\x5a\x66\x36\x97\x4c\xb1\x46\x87\x8e\xc3\xaf\x4c\xe9\x85\xa2\xb8\xf8\x0a\x17\x30\x8c\x13\xf5\xb7\x0e\xd5\xfd\x40\xee\x70\xea\xdf\xe9\xe3\x22\x4c\x88\x48\x92\xb8\x0d\xe1\xde\x08\x50\x06\x14\x76\x82\x73\xa4\xeb\x41\x6c\xb7\xbc\x02\x11\xc8\xf2\x5f\xa4\xab\x8d\x61\x6e\x95\x74\x34\x94\x26\xb9\xe1\xd7\x28\xec\xa2\x51\x9c\x04\x36\xbe\x86\xef\x7f\x9d\x16\xe1\xbd\x40\x59\x1d\xc8\x81\xdf\x0e\xe5\xb0\x6a\xfd\x4f\x04\xe9\x23\xe1\x3b\xdb\x96\xf7\x97\x2e\xa1\xe7\x43\x30\xfc\x5f\x01\x00\x00\xff\xff\x8b\xcd\xd9\xa5\xef\x2f\x00\x00")

func baronNamePbBaronGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_baronNamePbBaronGotemplate,
		"baron/NAME.pb.baron.gotemplate",
	)
}

func baronNamePbBaronGotemplate() (*asset, error) {
	bytes, err := baronNamePbBaronGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "baron/NAME.pb.baron.gotemplate", size: 12271, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x22, 0x29, 0x57, 0xa4, 0xba, 0x81, 0x1d, 0x80, 0x3b, 0xf, 0xd9, 0xe9, 0x2f, 0x5e, 0xdd, 0xb6, 0x12, 0xad, 0x43, 0x44, 0x6f, 0x32, 0x9b, 0xce, 0x6c, 0x95, 0xa8, 0x98, 0x9c, 0x40, 0xf9, 0x83}}
	return a, nil
}

var _cmdNameMainGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xc1\x8e\x9b\x30\x10\x86\xcf\xf8\x29\xa6\x96\x5a\x81\x94\x9a\x3d\x74\x7b\x48\x95\xc3\x36\xa4\xe9\x5e\x1a\x44\xd8\xbd\x56\x06\x06\x62\x15\x0c\xb2\x1d\x56\x11\xe2\xdd\x2b\x1b\x52\xd1\xee\x56\xbb\x27\x1b\xe6\x9f\xcf\xa3\xf9\x67\xc2\x10\xb6\x6d\x81\x50\xa1\x44\xc5\x0d\x16\x90\x5d\x20\xe3\xaa\x95\x0c\xa2\x03\xfc\x38\xa4\xb0\x8b\xee\x53\x46\xc2\x10\x12\x54\x67\x29\x85\xac\x26\x01\x3c\x89\xba\x86\xb6\x47\xf5\xa4\x84\x41\x30\x27\xa1\xa1\x14\x35\x3a\xf1\x23\x2a\x2d\x5a\xb9\x86\x61\x60\xf3\x7d\x1c\x17\x01\x88\xb8\xc1\x65\xd4\x7e\x8f\x23\x21\x1d\xcf\x7f\xf1\x0a\xa1\xe1\x42\x12\x22\x9a\xae\x55\x06\x7c\xe2\xd1\xb2\xe6\x15\xb5\x67\x63\xec\xd1\x6a\x4a\x88\x17\x86\x90\xda\x77\x8f\xa8\x7a\x91\xa3\x3b\x51\x11\x8f\x0e\x03\xbb\x77\xb9\x31\x37\x27\xf8\x38\x8e\x10\x6a\x17\xa3\x24\x20\xa4\xe7\x0a\xf2\x56\x96\xa2\x82\xe9\x2f\xdb\xba\x2f\x42\xca\xb3\xcc\x41\x48\x61\xfc\x00\x06\xe2\xd9\x47\xd9\xd1\x28\x21\xab\x47\xae\xfc\x0f\x53\x12\x8b\x30\x3b\x57\x77\x45\xa1\x56\x40\x0b\x7b\x67\xbc\x28\x14\x5d\x01\x5d\xdf\xde\x7c\xbe\xb1\x17\x27\x01\x2e\x0b\x68\xd0\x28\x91\x6b\xa8\x85\x36\x28\xc1\x2a\x51\x6b\x1a\xfc\x97\xfe\x3d\x4d\xe3\x19\x7e\x32\xa6\x5b\xb2\x6f\x1d\xdb\x0a\xde\x8e\xdb\x27\xf1\x76\xc6\x55\xaa\xcb\x97\xb8\x4f\x0e\x57\x25\xf1\x16\x7c\x0b\x0d\x9e\x53\x5d\x8f\x1f\x34\x02\xca\x5e\xa8\x56\x36\x28\x0d\xf4\x5c\x09\x9e\xd5\xa8\x57\x20\x4a\xd0\x68\x18\x7c\xab\x79\xa5\xe1\xc4\x7b\x84\x4e\x89\x56\x09\x73\x71\xc3\x01\x3b\xd9\x5b\xbd\x66\xc4\x13\xa5\x03\xc3\x7a\x03\xad\x66\x7b\x34\x28\x7b\x9f\x46\xbb\xaf\x0f\xfb\x9f\x77\x51\x94\xd0\xe0\xcb\x24\x78\xb7\x01\x4a\x6d\xff\xbd\x7f\x1b\x0e\x1b\xa7\x20\xde\xe8\x70\x6e\x3a\xfe\xc6\xc5\x87\x24\xb5\x20\x17\x7a\x06\xba\xf6\x16\x36\x50\x36\x86\x1d\x3b\x25\xa4\x29\x7d\xba\x7e\xaf\xe9\xca\xe5\x04\x57\xf6\x0b\xa5\xda\xec\x57\x2a\x5d\x3c\xb0\x2c\xf4\x05\x98\xf5\xe5\x15\xd8\xd5\xba\x05\x6c\x9c\x67\xd4\xee\xc7\x34\xa3\xd6\x9f\xae\xe0\x06\xaf\xae\xa1\xb6\xae\x98\x13\x5e\x26\x3f\x32\x44\xf9\x67\x51\xad\xbb\xd9\x05\xec\xac\xe8\x79\x64\x62\xae\x34\xfa\xd6\xea\x79\x19\x92\xb3\xf4\xa7\x0a\x02\x32\x92\xdf\x01\x00\x00\xff\xff\x94\x5b\xd1\x86\x24\x04\x00\x00")

func cmdNameMainGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_cmdNameMainGotemplate,
		"cmd/NAME/main.gotemplate",
	)
}

func cmdNameMainGotemplate() (*asset, error) {
	bytes, err := cmdNameMainGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/NAME/main.gotemplate", size: 1060, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x35, 0x3c, 0xe7, 0xd3, 0x41, 0x72, 0xb3, 0x2, 0x54, 0x67, 0xca, 0x27, 0xe1, 0x69, 0xde, 0x43, 0x43, 0xf1, 0x3e, 0x15, 0x71, 0xa3, 0x5a, 0xee, 0x8d, 0x2f, 0x19, 0x68, 0xc0, 0xea, 0xa4, 0x3c}}
	return a, nil
}

var _serverServerGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x4d\x6f\xdb\x38\x13\x3e\x8b\xbf\x62\x2a\xf4\x20\x03\xae\x74\x78\x6f\x41\x73\x68\x93\xbe\xdb\x00\x4d\x6a\x38\xc6\xee\x99\x16\xc7\x14\x11\x99\xd4\x0e\x29\x3b\x81\xa0\xff\xbe\x18\x7d\x59\x4e\x1a\xef\xc7\xc5\x96\x38\x33\x0f\x9f\x79\xe6\x43\x59\x06\x37\x4e\x21\x68\xb4\x48\x32\xa0\x82\xed\x0b\x6c\x25\x39\x9b\xc2\xed\x4f\x78\xf8\xb9\x81\x6f\xb7\x77\x9b\x54\x64\x19\xac\x91\x6a\x6b\x8d\xd5\xbd\x03\x1c\x4d\x59\x82\x3b\x20\x1d\xc9\x04\x84\x50\x18\x0f\x3b\x53\x62\xe7\xfc\x3b\x92\x37\xce\x5e\x41\xd3\xa4\xc3\x73\xdb\xce\x0c\x70\x2b\x03\xce\xad\xfc\xde\xb6\x42\x54\x32\x7f\x92\x1a\xc1\x23\x1d\x90\x84\x30\xfb\xca\x51\x80\x44\x44\x71\xe9\x74\x2c\xa2\xd8\x62\x18\xfe\xb2\x22\x84\x6a\xfe\x9c\x55\x15\xb9\x5d\x2c\x44\x94\x65\xf0\x3f\x05\x2b\x49\xe1\x45\x44\xb1\x76\x4e\x97\x98\x6a\x57\x4a\xab\x53\x47\x3a\xd3\x54\xe5\x83\xdf\x86\x89\x3f\x22\x1d\x4c\x8e\x22\xaa\xb6\x10\x37\x4d\xba\xfa\x7a\xd7\x5d\xbc\x92\xa1\x80\x4f\x6d\xcb\xb7\x34\x4d\x7a\x7e\x08\x99\xef\xc3\x62\xb1\x10\x42\x74\x62\xda\x9d\xd1\x90\x3b\x1b\xa4\xb1\x1e\x42\x81\x40\xf8\x67\x6d\x08\x15\xec\x0c\x96\xca\xc3\xce\x11\x8c\x4a\xca\x31\xcf\xf0\x52\xe1\x18\xed\x03\xd5\x79\x80\x46\x44\xdf\x37\x9b\xd5\x17\xa5\x88\x8f\x8c\xd5\x22\xba\xc5\x6d\xad\xcf\x4e\x7e\x5b\xaf\x6e\xe6\x07\xad\x10\xbb\xda\xe6\xf0\x80\xc7\x6f\x56\x55\xce\xd8\xe0\x13\x7f\xc8\xa1\xda\xa6\x4d\x93\x0e\x79\xa6\x0f\x72\x8f\x6d\xfb\xd8\x5d\xbe\x60\xdb\xe4\xcc\xf7\x66\x19\x7c\xad\xbd\xb1\xe8\x3d\x28\xb7\x97\xc6\xa6\xbd\x56\x7f\x90\xac\x46\xad\xe0\x68\x42\x01\x7b\xa3\x54\x89\x47\x49\xe8\x53\x78\xc4\xbe\x70\x26\xc7\x6c\x6e\xd0\x4e\x44\xcc\xe1\x7a\xb4\xa6\x0c\x34\xe0\x30\xbb\x45\x0f\x3f\x92\x98\x2e\x8d\x0e\x92\xb8\xf6\x4d\x43\xd2\x6a\x84\x8f\x06\xae\xae\x61\xca\xe2\x1e\x43\xe1\x94\xe7\x5a\x88\x28\x6a\x9a\x8d\xfb\xe1\x8e\x48\xf0\xd1\x0c\x09\x4e\x80\xd7\x9c\xe3\xbd\x7c\xc2\xa6\x79\x63\xec\x09\x44\x4d\x83\x56\x31\x10\x93\xc1\x49\x8e\xab\xeb\x33\x79\x9a\x7f\x4c\xe6\xcd\x3d\x57\x00\x00\x17\x48\x2e\x67\x1c\xda\x99\xde\x1e\x4b\xcc\x79\x36\x4f\x35\xfa\xb5\xf4\x85\xb4\xaa\x44\xf2\x6f\xb4\x3f\x65\x73\x5e\x81\x53\x87\x4c\x1e\x9c\x3c\x61\xa8\xc9\xc2\x74\xc6\x4d\xc5\x0b\xa0\xb6\xe0\x83\xa4\xe0\x41\x82\xc5\x23\xf0\xc8\x0d\x0d\xbc\x04\xbd\x5e\xdd\x4c\x2f\xd2\x2a\x90\xa0\xb8\x5b\x87\xb3\x9e\x72\x28\x90\x91\x2a\xe9\x3d\x2a\x1e\x13\xee\x77\x76\x2e\x9d\xd6\x48\x7d\xeb\xae\x6b\x9b\xe4\x3b\x3d\x8c\xc3\x82\x1b\x92\x9b\xe7\xea\xc4\xfd\x01\x8f\x63\xf3\x2c\x5e\xd5\xea\x75\xdf\x0f\x9d\x75\x8f\x79\x21\xad\xc9\x65\x79\xea\x2d\x24\xea\x50\xf7\xf2\x09\x13\x36\x03\x12\x39\x1a\x22\xee\x6c\x40\xa2\xba\x0a\xa3\xac\xa9\x88\xb4\x9b\x28\x4c\xe6\xef\xbd\x35\x61\xb4\x21\xb4\x9b\x52\x28\x8d\x0f\xbc\x56\xfb\x38\xce\x2c\xe9\x72\x89\x4a\xa7\xd3\x15\x19\x1b\x4a\x9b\xc4\x81\xa4\xf5\xbc\x54\xe2\x25\xc4\x9d\x60\xfc\x20\x95\xa2\x78\x09\xf9\x4e\xa7\xd3\xc8\x33\x78\xb4\x67\xc2\xac\xfb\xa8\x01\xde\xd7\xcf\x2c\x42\xb4\x4f\x7b\x26\x49\x9c\x75\x30\xfd\x2e\xcc\xe2\x65\xef\x3e\xd0\xfc\x3f\xd3\xe8\x2c\xe9\x9d\x55\xf8\xbc\xb8\x10\x9a\xef\x55\x69\x2c\xbe\x8f\x70\xd3\x3b\x5c\xc2\xe0\x1f\x53\x5e\xc0\x58\xf5\x0e\x97\x30\xfc\xcb\x7e\xeb\xca\xf7\x21\x1e\x3b\xfb\x25\x84\x40\x32\xbf\xc0\x61\xc3\xe6\x45\xa7\x6f\xd7\x13\x9f\x3f\xf5\x9e\x3f\xba\x0a\x7e\xb1\xaa\x13\x3a\x39\xab\xc6\x12\xf6\x0b\x11\xb5\xc9\x50\x72\xde\xd4\x30\xd5\xf2\x5f\x94\x9c\x03\x5f\x55\x7c\xdc\xfa\x9c\x50\x31\xec\x1f\x5e\x5d\x7c\x3e\x75\xdb\x69\x5e\xff\x9e\xf4\x08\xb8\x84\x62\xce\xb9\x9b\xd8\xff\xc2\x99\x03\xe3\xe5\x9c\xf2\xf8\x15\x62\x36\xa5\x5d\xf2\x20\x31\x71\x8b\x61\xe0\x93\xc4\x21\xaf\x7e\xe1\x6c\x76\x9d\xef\x87\x6b\xb0\xa6\xec\xae\x9d\xb2\x41\x22\x7e\xed\x97\x91\x88\xba\x95\x18\x79\x3a\xcc\x14\x61\xa4\xfe\x1b\x76\x2e\x48\xb7\x09\xf8\x13\x3f\x4d\x09\x75\x33\x52\x6d\xd3\x35\x6a\x26\x44\xef\x7c\x0b\x13\xbf\x04\x4f\x87\xb3\x5e\xf0\x69\x2f\x65\x69\xe7\xea\xad\x6b\xfb\x41\x9c\x8b\x84\xcf\x86\xf5\xf9\xfc\xa9\xdf\x05\xad\x10\x7f\x05\x00\x00\xff\xff\xa2\xb4\x54\xfe\x60\x09\x00\x00")

func serverServerGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_serverServerGotemplate,
		"server/server.gotemplate",
	)
}

func serverServerGotemplate() (*asset, error) {
	bytes, err := serverServerGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "server/server.gotemplate", size: 2400, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc0, 0xdc, 0x28, 0xa1, 0x90, 0x1d, 0x69, 0x7, 0xad, 0xe6, 0xf6, 0xfb, 0x7, 0xf3, 0x83, 0xdc, 0x2f, 0xe6, 0xb2, 0x5e, 0x1c, 0xc8, 0x5, 0xb8, 0xe7, 0x57, 0x32, 0x26, 0x78, 0xcf, 0xc8, 0x49}}
	return a, nil
}

var _serviceHooksGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x0d\x80\x20\x0c\x05\xd0\xbb\x53\xf4\x4c\xa2\x1d\xc6\x09\x50\xbe\xd5\x88\x7c\x53\x7b\x23\xec\xee\xeb\x5d\x93\xac\x80\x18\xe7\x2d\x3b\x9b\x1a\x9a\xf1\xbe\x42\xcf\xdc\x4a\x85\x6b\xe0\x79\x6b\x0e\x7c\x8b\x51\x0e\xba\xec\x2c\x90\xa4\x63\x4c\x7f\x00\x00\x00\xff\xff\xe8\xb0\x07\xec\x3e\x00\x00\x00")

func serviceHooksGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_serviceHooksGotemplate,
		"service/hooks.gotemplate",
	)
}

func serviceHooksGotemplate() (*asset, error) {
	bytes, err := serviceHooksGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service/hooks.gotemplate", size: 62, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xac, 0x1f, 0xe5, 0x64, 0xee, 0xef, 0x70, 0x78, 0x57, 0x74, 0xa7, 0xc9, 0x31, 0xc3, 0xd8, 0x85, 0xb7, 0xc3, 0xb5, 0xdc, 0xe2, 0x3f, 0x3b, 0x91, 0xaf, 0x20, 0x61, 0xd7, 0xa9, 0xfa, 0xc1, 0xb9}}
	return a, nil
}

var _serviceMiddlewaresGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x41\x0e\x02\x21\x0c\x05\xd0\xbd\xa7\xe8\x9a\x44\x7b\x18\x4f\x40\xec\xb7\x12\x81\x4e\xda\x4e\x66\x41\xb8\xfb\xbc\xb5\xb8\xd0\x1b\x20\xb5\x67\xfa\x19\xc1\x8a\xa9\xf6\x6f\xc9\xbf\x3a\xa5\xc3\x83\x13\xe3\xe8\x35\x11\x3c\x9a\x48\xc7\x55\x1d\xf1\x52\xa3\xaf\x39\x7d\x4c\x40\x85\xf7\x7e\xdc\x01\x00\x00\xff\xff\xcf\x9e\xe9\x81\x4b\x00\x00\x00")

func serviceMiddlewaresGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_serviceMiddlewaresGotemplate,
		"service/middlewares.gotemplate",
	)
}

func serviceMiddlewaresGotemplate() (*asset, error) {
	bytes, err := serviceMiddlewaresGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service/middlewares.gotemplate", size: 75, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcc, 0xfe, 0x9d, 0x1a, 0xaf, 0x47, 0xe8, 0x97, 0x82, 0x24, 0x50, 0x17, 0xb4, 0x49, 0x73, 0x3b, 0x68, 0xb7, 0xe5, 0x3a, 0x3d, 0xb6, 0x15, 0x9d, 0xb1, 0x8f, 0xc4, 0x27, 0xaf, 0xa7, 0x3c, 0xc1}}
	return a, nil
}

var _serviceServiceGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xd6\xd7\x52\x08\x4e\x4d\x55\x48\x4f\xcd\x4b\xcf\xcf\xce\x2c\xd1\x2f\x4e\x2d\x2a\xcb\x4c\x4e\xd5\x2f\x49\xcd\x2d\xc8\x49\x2c\x49\x2d\xd6\x4b\xcf\x57\x48\xcb\x2f\x52\x48\xce\x4f\x49\x55\xd0\xd2\xaf\xad\xe5\x02\x04\x00\x00\xff\xff\x83\x0c\x7f\x72\x35\x00\x00\x00")

func serviceServiceGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_serviceServiceGotemplate,
		"service/service.gotemplate",
	)
}

func serviceServiceGotemplate() (*asset, error) {
	bytes, err := serviceServiceGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service/service.gotemplate", size: 53, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x42, 0x66, 0x3f, 0xe7, 0xfb, 0x13, 0xd6, 0x89, 0x21, 0xa4, 0x89, 0x63, 0xaf, 0x76, 0x8b, 0xd3, 0x99, 0xab, 0x96, 0x1d, 0x35, 0xfa, 0x50, 0xf9, 0x59, 0x84, 0xf5, 0xa3, 0x13, 0xf5, 0xb7, 0x5f}}
	return a, nil
}

var _svcClientGrpcClientGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x4d\x6f\xdb\x38\x10\x3d\x8b\xbf\x62\xd6\x08\x16\x52\xa0\xd0\xf7\x2c\x7c\xa9\xd3\x2d\xba\xd8\xa6\x46\x1a\x74\x0f\x45\x51\x30\xd4\x58\x26\x2c\x93\x2a\x49\x3b\x31\x04\xfd\xf7\xc5\x90\x94\x23\x27\x8e\xdb\x43\x10\x8b\xf3\x38\x1f\xef\x0d\x39\x9c\x4e\x61\x6e\x2a\x84\x1a\x35\x5a\xe1\xb1\x82\x87\x3d\x78\xbb\x75\x8e\xc3\xcd\x67\xb8\xfd\x7c\x0f\xef\x6f\x3e\xde\x73\x36\x9d\xc2\x1d\xda\xad\xd6\x4a\xd7\x11\x00\x8f\xaa\x69\xc0\xec\xd0\x3e\x5a\xe5\x11\xfc\x4a\x39\x58\xaa\x06\x03\xf8\x2b\x5a\xa7\x8c\xbe\x86\xae\xe3\xe9\x77\xdf\x8f\x0c\x70\x23\x3c\x8e\xad\xf4\xdd\xf7\x8c\x20\x0b\x21\xd7\xa2\x46\xa8\x6d\x2b\xa1\xb5\x66\xa7\x2a\x74\x20\xa0\xbe\x5b\xcc\x41\x36\x0a\xb5\x87\xa5\xb1\xe0\x57\x48\x0e\xbe\xa0\xdd\x29\x89\xfc\x56\x6c\xb0\xef\xc1\xa5\x4f\xd6\x8e\xdc\x30\xa6\x36\xad\xb1\x1e\x72\x96\x4d\xa4\xd1\x1e\x9f\xfc\x84\x65\x93\xda\x98\xba\x41\x5e\x9b\x46\xe8\x9a\x1b\x5b\x4f\x09\xfd\xb6\x65\xba\x41\x2f\x2a\xe1\x45\x80\x28\xbf\xda\x3e\x70\x69\x36\xd3\x76\x5d\x4f\xd1\x5a\x63\xdd\x84\x1d\x5b\x6a\x73\xb5\x56\x7e\x4a\x7f\xa8\xab\xd6\x28\x4d\x81\xc9\x97\xb7\x42\xbb\x90\xd4\x1b\xf8\x03\x20\x25\xc5\xb2\xe9\x14\xee\x89\xe6\x54\x32\xcb\x26\x5d\xc7\x3f\x86\xca\x16\xc2\xaf\xe0\xaa\xef\x61\xea\x76\x54\x40\xfb\x00\x64\x5c\xbc\x3b\x36\x4f\x58\x11\x38\xbe\xc5\x47\xb0\xe8\xb7\x56\x3b\x10\x7a\x20\x0d\x1e\x84\x5c\xc7\x26\x38\xa6\x5b\x1a\xad\x51\x7a\x65\x34\x87\x8f\x1e\x94\x23\xf2\xc9\x8f\x45\xd7\x1a\xed\xd4\x83\x6a\x94\xdf\x83\x59\x06\x55\xa4\x68\x1a\xb4\xe0\x0d\x54\x4a\x34\x25\x08\x5d\x41\x23\x3c\x5a\x90\x8d\x71\x58\x46\xd0\xb3\x4f\xb6\xdc\x6a\x49\x39\xe5\xb4\x08\x97\x54\x2f\x9f\x87\xd0\x73\xa3\x75\x09\xa6\x25\x9c\x03\xce\xd3\xf2\xe7\xb0\x50\x40\xde\x3e\xf0\x57\x3d\x40\x5f\x68\x4b\x08\x8a\x14\xd0\xb1\x6c\x27\x2c\x48\x99\xaa\x99\x1b\xbd\x54\x35\x63\x19\x35\xd1\x8f\x12\x96\x70\x3d\x03\x2b\x74\x8d\x87\x38\x1d\xcb\x32\xb4\x96\x0c\xcb\xfc\x4f\x29\x0b\x96\x65\x6a\x49\x0e\xe1\x8f\x19\x68\xd5\x04\x44\x16\x19\xa4\xef\x14\xcc\xf1\xff\xac\x68\x73\xb4\xb6\x84\x89\x14\x5a\x1b\x0f\xa2\x6d\x9b\x7d\xf2\x3c\x21\x47\x3d\xcb\x7a\xc6\x32\x39\x2a\xc4\x51\xa4\x6f\xdf\x8f\xda\xe2\xa8\x52\x0a\x77\xca\xfa\x0e\x97\xc6\x62\x4e\xc9\xa4\xb6\xfe\x2a\x9a\x2d\xba\x7b\xf3\xe1\x6e\x31\xff\x94\xba\x35\x97\x92\xaf\x50\x54\x68\x5d\x51\x94\x14\x3e\xeb\xba\x2b\x78\x54\x7e\x05\x17\x1e\x29\x38\xef\x7b\x96\x8d\x56\xdb\x75\x4d\x64\x92\xe9\xc2\x23\x4f\x67\x32\xf2\x4b\xd1\x08\x19\x39\xbb\x50\x03\x68\x50\xe1\x13\xfa\x95\xa9\x5c\x04\x06\xee\xbb\xee\xde\xfc\x6b\x1e\xd1\xc2\x85\x4a\x22\xbd\x4f\xa7\x01\x86\x63\xc1\x87\x95\xb0\x2b\xf0\x4b\x61\xde\xde\x38\x83\x63\x46\x6e\xf1\x31\x92\x92\xc7\xbd\xc4\x88\x2e\xd3\xef\x49\xd7\x0d\x35\xf5\x3d\xef\xba\x71\xbe\x71\x71\x32\x86\xaa\x97\x8b\xef\xb5\x34\x15\x12\xa9\x23\xeb\x1d\xfe\xdc\xa2\xf3\x03\xe6\x06\x4f\x62\xc2\x09\xc1\x01\x14\x1a\xf6\x83\x09\xe4\x5e\x28\x3e\x98\xef\xf7\xed\x90\x48\xd7\x0f\xd8\xa3\x16\xe1\x9c\xa7\xf5\xe2\x40\x55\x5e\x84\x95\xa4\x08\xea\x2a\xa9\x98\x7e\x0d\x3f\xd8\xd0\xa9\x6e\x27\x0f\x7b\x5d\x47\x80\xb1\x86\x2f\x05\xa4\x0b\x23\xb8\x7b\xc5\xfd\x35\x00\x9c\x13\xb5\x7c\x8e\x9d\xf5\x25\x1d\x10\x16\xef\x76\x22\x07\xa2\x4a\x10\xe9\x62\xe7\x73\x88\x53\xe3\x2c\xb3\x74\x1d\x09\x38\xbe\x2d\x79\xdc\x31\x40\xfe\xa6\xfb\xc5\xaf\x44\xb8\xc9\x76\x68\xbd\x03\x41\x7e\xc3\x1d\x77\xa2\x0e\xb0\x48\x87\xd6\x1b\x10\xb0\x75\x68\xaf\x2a\xb3\x11\x4a\xbf\x01\x8d\x31\x38\x2c\xac\xda\x08\xab\x9a\x3d\xed\x59\x6e\x1b\x50\x1a\x44\xba\x74\xd2\x1d\x77\xb6\x90\xfc\x07\xa4\x43\xcc\xe7\xf1\x7f\x19\x5a\xfc\x2e\x24\xa3\xb4\x47\xbb\x14\x12\xbb\xbe\x80\x7c\xf4\x35\xbe\xe8\x62\xde\xd7\xb3\xe7\x7d\x3c\xbf\xfc\x75\xcb\x15\x87\x0e\x09\x0e\x06\xc5\x0e\xfd\xf3\x42\xb9\x78\x18\x7e\x4b\xb9\x73\xe7\xe6\xa4\x70\x71\x43\x42\xbc\xa5\xdb\xaf\x35\x89\x01\x82\x80\x67\x44\x0e\xa8\xdf\x12\xee\x5c\x1d\xa7\x74\x1b\x32\xf8\x4d\xd5\x7e\x86\x19\x94\xf2\x39\xa1\x58\x30\xbc\x21\xd8\xcf\x57\x72\x31\xbf\x6f\xf1\x68\xda\x81\xf3\x76\x2b\x3d\x05\x4b\x83\x00\xbe\x7d\x77\xde\x2a\x5d\xa7\x93\x39\x9e\x36\x51\x18\xaa\x3b\x7c\x05\x01\x36\xa6\x52\x4b\x85\x2e\xce\xee\xc3\xb3\x80\x26\x69\x88\x76\xb4\x9f\xb6\xe6\x97\xe3\x04\x8a\x58\x2e\x8b\x6c\xce\xfd\xd3\x30\xa7\xbe\xa0\xae\xf2\x35\xee\xc3\x70\x8f\x19\x15\xc7\xce\xba\x43\xad\xc1\xad\x81\x53\x8e\xc3\x40\x36\xc3\x94\x83\x19\x90\x4b\x36\x1e\xd1\x34\xf6\xfa\x14\xff\xdc\xac\x0c\xb9\x0c\xe4\x14\x70\x6a\xea\x8e\xbb\xf3\x45\x76\xd2\x3f\xbd\x6e\x86\x4d\x05\x97\xc3\xcb\x91\x7f\xba\x29\x5e\x22\x42\xf2\x34\x27\x5b\xa1\xc6\xca\x64\xc3\x13\x65\xfd\xfc\x44\x09\xe9\x85\xe9\xa8\x96\xb0\x2b\xc1\x04\x9b\xf4\x4f\x3c\x54\x93\xaf\x0b\x9e\xa7\xdc\xff\x22\x63\x1c\xa4\xd1\xf1\x8c\x1e\x23\xc4\x77\xf8\x2c\x61\x5d\xc2\x2e\x4c\x90\x3e\x3c\x4b\xe2\x23\x27\x42\xc7\xcf\x9c\xcb\x4d\x05\x33\x38\x14\xf0\x8f\x51\x3a\xbf\xdc\x54\xe5\xf3\xd2\x82\xf6\x44\xaf\x9c\xf3\xa2\x18\xdc\x25\x66\xa4\x7f\x8a\xec\xff\x1f\x00\x00\xff\xff\x00\xce\x0e\xa6\x70\x0c\x00\x00")

func svcClientGrpcClientGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcClientGrpcClientGotemplate,
		"svc/client/grpc/client.gotemplate",
	)
}

func svcClientGrpcClientGotemplate() (*asset, error) {
	bytes, err := svcClientGrpcClientGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/client/grpc/client.gotemplate", size: 3184, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x63, 0x72, 0x1f, 0xe5, 0x3a, 0x45, 0x1, 0x91, 0xd8, 0x5b, 0xa8, 0x47, 0x45, 0x45, 0x98, 0xee, 0x0, 0xf5, 0xc1, 0x3c, 0x43, 0xf0, 0x86, 0x3c, 0xec, 0xbe, 0x2d, 0x84, 0xed, 0x1a, 0x17, 0x6c}}
	return a, nil
}

var _svcClientHttpClientGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\xb1\x0d\xc2\x30\x10\x05\xd0\x3e\x53\x5c\x1d\x09\xdf\x10\x34\x29\x91\xc8\x02\x56\xf8\x98\x88\xc3\x67\x9d\x3f\x95\xe5\xdd\x69\x18\xe0\x8d\xa1\xab\xdc\x01\x29\x7e\x61\x7c\x7b\xd7\x82\x5a\xfc\x7d\x52\x5f\x64\x63\xe4\xda\x9b\x07\x95\xf8\x34\xcb\x44\x2a\x2e\x4f\x0f\x39\xfc\x01\x59\x75\xce\x65\x8c\x23\x9b\x49\xda\xf6\xfd\xb6\xc1\x1a\x22\x5d\xed\x44\xe5\xfe\x27\x92\xe6\x5c\x7e\x01\x00\x00\xff\xff\x0b\x3c\x4c\x9e\x69\x00\x00\x00")

func svcClientHttpClientGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcClientHttpClientGotemplate,
		"svc/client/http/client.gotemplate",
	)
}

func svcClientHttpClientGotemplate() (*asset, error) {
	bytes, err := svcClientHttpClientGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/client/http/client.gotemplate", size: 105, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa1, 0xf0, 0x36, 0xf9, 0x16, 0xea, 0x9d, 0x4e, 0x73, 0x64, 0xc5, 0xad, 0xb3, 0x1b, 0x4, 0xe, 0xd8, 0xc8, 0x1e, 0xf7, 0x7a, 0x39, 0x40, 0x4c, 0xb2, 0x12, 0x83, 0x35, 0xca, 0x82, 0x6f, 0xd0}}
	return a, nil
}

var _svcTransport_httpGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\x31\x0e\xc2\x30\x0c\x05\xd0\xbd\xa7\xf0\xdc\x21\xbe\x46\x47\xa4\xe6\x02\xa1\x7c\x02\x22\xc4\x96\x6b\xb1\x58\xbe\x3b\x4b\x0f\xf0\x22\x78\xa5\x1d\xa0\x7b\x33\x99\xdc\x31\xbb\x7c\xde\xce\x2f\x77\x75\x6b\xf3\x54\x31\x67\xc7\x57\x47\x73\x9c\xa5\x0b\x3d\xc5\xe8\x90\x07\x68\xe5\xcc\x25\xe2\x68\x63\x50\xd9\x6a\xbd\x6d\x18\x0a\x2b\x3b\xec\x07\xab\x97\xa1\x92\xb9\xfc\x03\x00\x00\xff\xff\x79\xd8\x00\xd0\x67\x00\x00\x00")

func svcTransport_httpGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcTransport_httpGotemplate,
		"svc/transport_http.gotemplate",
	)
}

func svcTransport_httpGotemplate() (*asset, error) {
	bytes, err := svcTransport_httpGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/transport_http.gotemplate", size: 103, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6a, 0x8f, 0x69, 0xe6, 0xed, 0x68, 0x29, 0xbf, 0xb, 0x72, 0x91, 0x8d, 0x78, 0x7c, 0x8b, 0x9e, 0x9b, 0xf8, 0xb7, 0x4d, 0x1b, 0x5c, 0xac, 0x7c, 0x20, 0x5e, 0x39, 0x3, 0x91, 0xe7, 0x71, 0xf1}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"baron/NAME.pb.baron.gotemplate":    baronNamePbBaronGotemplate,
	"cmd/NAME/main.gotemplate":          cmdNameMainGotemplate,
	"server/server.gotemplate":          serverServerGotemplate,
	"service/hooks.gotemplate":          serviceHooksGotemplate,
	"service/middlewares.gotemplate":    serviceMiddlewaresGotemplate,
	"service/service.gotemplate":        serviceServiceGotemplate,
	"svc/client/grpc/client.gotemplate": svcClientGrpcClientGotemplate,
	"svc/client/http/client.gotemplate": svcClientHttpClientGotemplate,
	"svc/transport_http.gotemplate":     svcTransport_httpGotemplate,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"baron": &bintree{nil, map[string]*bintree{
		"NAME.pb.baron.gotemplate": &bintree{baronNamePbBaronGotemplate, map[string]*bintree{}},
	}},
	"cmd": &bintree{nil, map[string]*bintree{
		"NAME": &bintree{nil, map[string]*bintree{
			"main.gotemplate": &bintree{cmdNameMainGotemplate, map[string]*bintree{}},
		}},
	}},
	"server": &bintree{nil, map[string]*bintree{
		"server.gotemplate": &bintree{serverServerGotemplate, map[string]*bintree{}},
	}},
	"service": &bintree{nil, map[string]*bintree{
		"hooks.gotemplate":       &bintree{serviceHooksGotemplate, map[string]*bintree{}},
		"middlewares.gotemplate": &bintree{serviceMiddlewaresGotemplate, map[string]*bintree{}},
		"service.gotemplate":     &bintree{serviceServiceGotemplate, map[string]*bintree{}},
	}},
	"svc": &bintree{nil, map[string]*bintree{
		"client": &bintree{nil, map[string]*bintree{
			"grpc": &bintree{nil, map[string]*bintree{
				"client.gotemplate": &bintree{svcClientGrpcClientGotemplate, map[string]*bintree{}},
			}},
			"http": &bintree{nil, map[string]*bintree{
				"client.gotemplate": &bintree{svcClientHttpClientGotemplate, map[string]*bintree{}},
			}},
		}},
		"transport_http.gotemplate": &bintree{svcTransport_httpGotemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
