package main

import (
	"context"
	"flag"
	"log"

	pb "{{.PBImportPath -}}"

	"google.golang.org/grpc"
)

var (
	grpcAddr string
	httpAddr string
)

func init() {
	flag.StringVar(&grpcAddr, "grpc.addr", ":5040", "gRPC (HTTP) listen address")
	flag.StringVar(&httpAddr, "http.addr", ":5050", "HTTP listen address")
}

func main() {
	flag.Parse()
	// grpc connection
	conn, err := grpc.Dial(
		grpcAddr,
		grpc.WithInsecure(),
		grpc.WithBlock(),
	)
	if err != nil {
		log.Fatal(err)
	}
	defer conn.Close()


	{{with $te := . }}
	{{range $i := $te.Service.Methods -}}
	{
	
		log.Println("[{{$te.Service.Name}}.{{GoName $i.Name}}]")
		pln()
		ctx := context.Background()
		// request
		var in pb.{{GoName $i.RequestType.Name}}
		// baron grpc client
		baronGrpcClient, err := pb.NewGRPCClient(conn)
		if err != nil {
			log.Fatal(err)
		}
		out, err := baronGrpcClient.{{GoName $i.Name}}(ctx, &in)
		if err != nil {
			log.Fatalf("[Baron.GRPCClient] {{$te.Service.Name}}.{{GoName $i.Name}} err=%v\n", err)
		}
		log.Printf("[Baron.GRPCClient] {{$te.Service.Name}}.{{GoName $i.Name}} result=%+v\n", *out)
		pln()
		// grpc client
		grpcClient := pb.New{{$te.Service.Name}}Client(conn)
		out, err = grpcClient.{{GoName $i.Name}}(ctx, &in)
		if err != nil {
			log.Fatalf("[GRPCClient] {{$te.Service.Name}}.{{GoName $i.Name}} err=%v\n", err)
		}
		log.Printf("[GRPCClient] {{$te.Service.Name}}.{{GoName $i.Name}} result=%+v\n", *out)
		pln()
		// baron http client
		baronHTTPClient, err := pb.NewHTTPClient(httpAddr)
		if err != nil {
			log.Fatal(err)
		}
		out, err = baronHTTPClient.{{GoName $i.Name}}(ctx, &in)
		if err != nil {
			log.Fatalf("[Baron.HTTPClient] {{$te.Service.Name}}.{{GoName $i.Name}} err=%v\n", err)
		}
		log.Printf("[Baron.HTTPClient] {{$te.Service.Name}}.{{GoName $i.Name}} result=%+v\n", *out)
		pln()
	}
	{{end}}
	{{end}}

}
func pln() {
	log.Println("---------------------------------------------------------------------------------")
}
