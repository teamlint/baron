// Code generated by baron. DO NOT EDIT.
// Rerunning baron will overwrite this file.
// Version: {{.Version}}
// Version Date: {{.VersionDate}}

package server

import (
	"log"
	"net"
	"net/http"
	"net/http/pprof"

	// 3d Party
	"github.com/nats-io/nats.go"
	"google.golang.org/grpc"

	// This Service
	pb "{{.PBImportPath -}}"
	"{{.ImportPath -}} /service"
)


// Config contains the required fields for running a server
type Config struct {
	HTTPAddr string
	DebugAddr string
	GRPCAddr string
	NATSAddr string
	Debug bool
}

func NewEndpoints(svc pb.{{.Service.Name}}Server) pb.Endpoints {
	// Business domain.
	// Wrap Service with middlewares. See service/middlewares.go
	svc = service.WrapService(svc)

	// Endpoint domain.
	var (
	{{range $i := .Service.Methods -}}
		{{ToLower $i.Name}}Endpoint = pb.Make{{$i.Name}}Endpoint(svc)
	{{end}}
	)

	endpoints := pb.Endpoints{
	{{range $i := .Service.Methods -}}
		{{$i.Name}}Endpoint:    {{ToLower $i.Name}}Endpoint,
	{{end}}
	}

	// Wrap selected Endpoints with middlewares. See handlers/middlewares.go
	endpoints = service.WrapEndpoints(endpoints)

	return endpoints
}

// Run starts a new http server, gRPC server, and a debug server with the
// passed config and logger
func Run(cfg Config) {
	svc := service.NewService()
	endpoints := NewEndpoints(svc)

	// Mechanical domain.
	errc := make(chan error)

	// Interrupt handler.
	go service.InterruptHandler(errc)

	// Debug listener.
	if cfg.Debug {
		go func() {
			log.Println("transport", "debug", "addr", cfg.DebugAddr)

			m := http.NewServeMux()
			m.Handle("/debug/pprof/", http.HandlerFunc(pprof.Index))
			m.Handle("/debug/pprof/cmdline", http.HandlerFunc(pprof.Cmdline))
			m.Handle("/debug/pprof/profile", http.HandlerFunc(pprof.Profile))
			m.Handle("/debug/pprof/symbol", http.HandlerFunc(pprof.Symbol))
			m.Handle("/debug/pprof/trace", http.HandlerFunc(pprof.Trace))

			errc <- http.ListenAndServe(cfg.DebugAddr, m)
		}()
	}

	// HTTP transport.
	go func() {
		log.Println("transport", "HTTP", "addr", cfg.HTTPAddr)
		h := pb.MakeHTTPHandler(endpoints)
		errc <- http.ListenAndServe(cfg.HTTPAddr, h)
	}()

	// gRPC transport.
	go func() {
		log.Println("transport", "gRPC","addr", cfg.GRPCAddr)
		ln, err := net.Listen("tcp", cfg.GRPCAddr)
		if err != nil {
			errc <- err
			return
		}

		srv := pb.MakeGRPCServer(endpoints)
		s := grpc.NewServer()
		pb.Register{{.Service.Name}}Server(s, srv)

		errc <- s.Serve(ln)
	}()

	// NATS transport.
	go func() {
		log.Println("transport", "NATS","addr", cfg.NATSAddr)
		conn, err := nats.Connect(cfg.NATSAddr)
		if err != nil {
			errc <- err
			return
		}
		// defer conn.Close()

		srv := pb.MakeNATSServer(endpoints)
		err = pb.ServeNATS(conn, srv)
		if err != nil {
			errc <- err
			return
		}
	}()

	// Run!
	log.Println("exit", <-errc)
}

